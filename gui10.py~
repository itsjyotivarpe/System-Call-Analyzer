# Guinew1.py

import commands
import wx
import sqlite3
import wx.grid
import pylab as p

row_no = 0
col_no = 0
column = []
col1 = 0
col2 = 0
row1 = 0
row2 = 0
row_str = ''
row_value_str = ''
name = ''


conn = sqlite3.connect('sparse.db')

curs = conn.cursor()		#for syscall
curs1 = conn.cursor()		#for unfinished
curs2 = conn.cursor()		#for timegraph

ID_FILE_OPEN = wx.NewId()
ID_FILE_INPUT = wx.NewId()
ID_FILE_HOME = wx.NewId()
ID_FILE_PERT = wx.NewId()
ID_FILE_COMP = wx.NewId()

class Example(wx.Frame):
    
    def __init__(self, *args, **kwargs):
        super(Example, self).__init__(*args, **kwargs) 
        self.InitUI()


	self.frame1 = wx.Frame(self, -1, 'System Call Analyzer', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.framedisp = wx.Frame(self, -1, 'System Call Analyser Output ', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.framePert = wx.Frame(self, -1, 'Statistics Of Special System Calls ', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.framecomp = wx.Frame(self, -1, 'Comparative Statics of All System Calls ', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameop = wx.Frame(self, -1, 'System Call Trace Output', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameUnfin = wx.Frame(self, -1, 'Unfinished And Resumed Calls Statistics', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameProc = wx.Frame(self, -1, 'Process  Tree', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameCode = wx.Frame(self, -1, 'Code Optimization', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameFileio = wx.Frame(self, -1, 'File Input/Output Statistics', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameErrana = wx.Frame(self, -1, 'Error Analysis', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameSummary = wx.Frame(self, -1, 'Summary of All System Calls', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameRead = wx.Frame(self, -1, 'Particular Systam Call Statistics : READ', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameWrite = wx.Frame(self, -1, 'Particular Systam Call Statistics : WRITE', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameAccess = wx.Frame(self, -1, 'Particular Systam Call Statistics : ACCESS', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameFstat = wx.Frame(self, -1, 'Particular Systam Call Statistics : FSTAT/FSTAT64', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameStat = wx.Frame(self, -1, 'Particular Systam Call Statistics : STAT/STAT64', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameLstat = wx.Frame(self, -1, 'Particular Systam Call Statistics : LSTAT/LSTAT64', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameMmap = wx.Frame(self, -1, 'Particular Systam Call Statistics : MMAP', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameMprotect = wx.Frame(self, -1, 'Particular Systam Call Statistics : MPROTECT', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameMunmap = wx.Frame(self, -1, 'Particular System Call Statistics : MUNMAP', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameRt_sigaction = wx.Frame(self, -1, 'Particular Systam Call Statistics : RT_SIGACTION', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameUname = wx.Frame(self, -1, 'Particular Systam Call Statistics : UNAME', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameTime = wx.Frame(self, -1, 'Time Consumption of All System Calls', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.framePerTime = wx.Frame(self, -1, 'Percentage Time Consumption of All System Calls', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameErr = wx.Frame(self, -1, 'Errors in All System Calls', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.framePerErr = wx.Frame(self, -1, 'Percentage Errors in All System Calls', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameCnt = wx.Frame(self, -1, 'Count of All System Calls', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameUnfini = wx.Frame(self, -1, 'Unfinished System Calls', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameResumed = wx.Frame(self, -1, 'Resumed System Calls', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameInfo = wx.Frame(self, -1, 'Information of All System Calls in Particular Statistics', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.frameRefer1 = wx.Frame(self, -1, 'Refer1 Optimization : Escape Charactors', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)

	self.frameerr = wx.Frame(self, -1, 'Error ', pos = (300,300), size = (500,200))
	self.framefire = wx.Frame(self, -1, 'Warning ', pos = (300,300), size = (450,175))

        
    def InitUI(self):  
        #self.font1 = wx.SystemSettings_GetFont(wx.SYS_SYSTEM_FONT)
        #self.font1.SetPointSize(18)
  

        self.SetSize((800, 500))
	self.SetPosition((150, 150))
        self.SetTitle('System Call Analyzer')
	self.Title.SetStyle(wx.FONTSTYLE_ITALIC)
        self.Centre()
        self.Show(True)
        
     # Font for the text

        self.font = wx.SystemSettings_GetFont(wx.SYS_SYSTEM_FONT)
        self.font.SetPointSize(15)

     # Menubar

        self.menubar = wx.MenuBar()
        
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(wx.ID_EXIT, 'Quit', 'Quit application')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        
        self.SetMenuBar(self.menubar)

    # self.panel for main screen

        self.panel = wx.Panel(self)
        self.vbox = wx.BoxSizer(wx.VERTICAL)

        self.stpwd = wx.StaticText(self.panel, label='Enter Password')
        self.stpwd.SetFont(self.font)
        self.vbox.Add(self.stpwd, flag=wx.CENTER, border=200)

        self.tcpwd = wx.TextCtrl(self.panel, style=wx.TE_PASSWORD)
        self.vbox.Add(self.tcpwd, flag=wx.EXPAND | wx.LEFT | wx.RIGHT, border=200)

        self.btn1 = wx.Button(self.panel, label='Start', size=(200, 100))
        self.btn1.Bind(wx.EVT_BUTTON, self.OnClick1)
        self.vbox.Add(self.btn1, flag=wx.ALIGN_CENTER | wx.TOP, border=50)
        
        self.panel.SetSizer(self.vbox)
                                
    def OnQuit(self, e):
        self.Close()
	commands.getstatusoutput("python alldrop.py")

    def OnClick1(self, e):

	pwd = self.tcpwd.GetValue()
	
	if pwd!="sparse123":
		self.frameerr2 = wx.Frame(self, -1, 'Error ', pos = (300,300), size = (500,200))
	        self.panelerrpwd = wx.Panel(self.frameerr2)
	        self.hboxerrpwd = wx.BoxSizer(wx.HORIZONTAL)
		self.sterrpwd = wx.StaticText(self.panelerrpwd, label='Wrong Password ...')
		self.sterrpwd.SetFont(self.font)
		self.hboxerrpwd.Add(self.sterrpwd, flag=wx.RIGHT, border=200)
	        self.panelerrpwd.SetSizer(self.hboxerrpwd)
		self.frameerr2.Show()
 
	else:
		if not self.frame1:
			self.frame1 = wx.Frame(self, -1, 'System Call Analyzar', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        
	        self.menubar = wx.MenuBar()
	        
	        self.fileMenu = wx.Menu()
	        self.fitem = self.fileMenu.Append(wx.ID_EXIT, 'Quit', 'Quit application')
	        self.menubar.Append(self.fileMenu, '&File')
	        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
	        
	        self.frame1.SetMenuBar(self.menubar)
		
	    # self.panel for screen Through Command

		self.panel1 = wx.Panel(self.frame1)
		self.vbox11 = wx.BoxSizer(wx.VERTICAL)
	 	self.hbox11 = wx.BoxSizer(wx.HORIZONTAL)

		self.st1 = wx.StaticText(self.panel1, label='Enter Command : ')
		self.st1.SetFont(self.font)
		self.hbox11.Add(self.st1, flag=wx.RIGHT, border=200)

		self.tc11 = wx.TextCtrl(self.panel1)
		self.hbox11.Add(self.tc11, proportion=1)
		self.vbox11.Add(self.hbox11, flag=wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, border=100)
		self.vbox11.Add((-1, 10))

		self.hbox12 = wx.BoxSizer(wx.HORIZONTAL)

		self.st2 = wx.StaticText(self.panel1, label='Enter Filename(If Required):')
		self.st2.SetFont(self.font)
		self.hbox12.Add(self.st2, flag=wx.RIGHT, border=200)

		self.tc12 = wx.TextCtrl(self.panel1)
		self.hbox12.Add(self.tc12, proportion=1)
		self.vbox11.Add(self.hbox12, flag=wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, border=100)
		self.vbox11.Add((-1, 10))

		self.btn11 = wx.Button(self.panel1, label='SUBMIT', size=(200, 100))
		self.btn11.Bind(wx.EVT_BUTTON, self.OnClick11)
		self.vbox11.Add(self.btn11, flag = wx.TOP | wx.CENTER, border=100) 
	    
		self.panel1.SetSizer(self.vbox11)
		self.frame1.Show()

	#Click on SUBMIT button

    def OnClick11(self, e):

	cmd=''
	filenm=''
	list1 = ['cat','find','sort','split','wc']
        cmd = self.tc11.GetValue()

	if cmd == 'vi':
		if not self.frameerr:
			self.frameerr = wx.Frame(self, -1, 'Error ', pos = (300,300), size = (500,200))

	        self.panelerr = wx.Panel(self.frameerr)
	        self.vboxerr = wx.BoxSizer(wx.VERTICAL)
	        self.hboxerr1 = wx.BoxSizer(wx.HORIZONTAL)
		self.sterr = wx.StaticText(self.panelerr, label='vi command NOT allowed ...')
		self.sterr.SetFont(self.font)
		self.hboxerr1.Add(self.sterr, flag=wx.RIGHT, border=200)
		self.vboxerr.Add(self.hboxerr1, flag=wx.LEFT | wx.RIGHT | wx.TOP, border=15)
		self.vboxerr.Add((-1, 10))
		self.hboxerr2 = wx.BoxSizer(wx.HORIZONTAL)
		self.btnok = wx.Button(self.panelerr, label='OK', size=(100, 50))
		self.btnok.Bind(wx.EVT_BUTTON, self.Oncncl)
		self.hboxerr2.Add(self.btnok, flag=wx.LEFT | wx.RIGHT, border=50)
		self.vboxerr.Add(self.hboxerr2, flag=wx.CENTER | wx.BOTTOM, border=15)
		self.vboxerr.Add((-1, 10))
	        self.panelerr.SetSizer(self.vboxerr)
		self.frameerr.Show()


	elif cmd in list1:
		filenm = self.tc12.GetValue()

		if filenm=='':
			self.frameerr1 = wx.Frame(self, -1, 'Error ', pos = (300,300), size = (500,200))
		        self.panelerr = wx.Panel(self.frameerr1)
		        self.hboxerr = wx.BoxSizer(wx.HORIZONTAL)
			self.sterr = wx.StaticText(self.panelerr, label='Enter File Name Please ...')
			self.sterr.SetFont(self.font)
			self.hboxerr.Add(self.sterr, flag=wx.RIGHT, border=200)
		        self.panelerr.SetSizer(self.hboxerr)
			self.frameerr1.Show()
		else:
			self.run()

	elif cmd=='firefox':

#		self.framefire = wx.Frame(self, -1, 'Warning ', pos = (300,300), size = (450,175))
		if not self.framefire:
			self.framefire = wx.Frame(self, -1, 'Warning ', pos = (300,300), size = (450,175))

		self.panelfire = wx.Panel(self.framefire)
		self.vboxfire = wx.BoxSizer(wx.VERTICAL)
		self.hboxfire1 = wx.BoxSizer(wx.HORIZONTAL)

		self.stfire = wx.StaticText(self.panelfire, label='To get better output you have to\n close most resent firefox window \nas soon as possible...\n Do you still want to continue')
		self.stfire.SetFont(self.font)
		self.hboxfire1.Add(self.stfire, flag=wx.RIGHT, border=200)

		self.vboxfire.Add(self.hboxfire1, flag=wx.LEFT | wx.RIGHT | wx.TOP, border=25)
		self.vboxfire.Add((-1, 10))
		
		self.hboxfire2 = wx.BoxSizer(wx.HORIZONTAL)

		self.btnok = wx.Button(self.panelfire, label='OK', size=(100, 50))
		self.btnok.Bind(wx.EVT_BUTTON, self.OnOK)
		self.hboxfire2.Add(self.btnok, flag=wx.ALIGN_LEFT, border=50)

		self.stfire = wx.StaticText(self.panelfire, label='            ')
		self.hboxfire2.Add(self.stfire)

		self.btncncl = wx.Button(self.panelfire, label='CANCEL', size=(100, 50))
		self.btncncl.Bind(wx.EVT_BUTTON, self.Oncncl)
		self.hboxfire2.Add(self.btncncl, flag=wx.ALIGN_RIGHT, border=50)

		self.vboxfire.Add(self.hboxfire2, flag=wx.LEFT | wx.RIGHT | wx.BOTTOM, border=50)
		self.vboxfire.Add((-1, 10))
		self.panelfire.SetSizer(self.vboxfire)

		self.framefire.Show()

	else:
		self.run()
	
	#Click on OK button in firefox warning window

    def OnOK(self, e):
	commands.getoutput("strace -o sample.txt -tt -f -TT firefox")
	commands.getstatusoutput("python fireclose.py")
	self.framefire.Hide()
	self.disp()

	#Click on CANCEL button in firefox warning window
    def Oncncl(self, e):
	self.tc11.SetValue(" ")
	self.framefire.Hide()
	self.frameerr.Hide()
	
	#Parsing strace output
    def run(self):

		cmd = self.tc11.GetValue()
		filenm = self.tc12.GetValue()

		trace = "strace -o sample.txt -tt -f -TT "+cmd+" "+filenm
		output = commands.getstatusoutput(trace)
		commands.getstatusoutput("python parse4.py")
		
		self.disp()

    def OnInput(self, e):
	self.framedisp.Hide()
	self.framePert.Hide()
	self.framecomp.Hide()
	self.frameop.Hide()
	self.frameUnfin.Hide()
	self.frameProc.Hide()
	self.frameCode.Hide()
	self.frameErrana.Hide()
	self.frameFileio.Hide()
	self.frameSummary.Hide()
	self.frameRead.Hide()
	self.frameWrite.Hide()
	self.frameAccess.Hide()
	self.frameFstat.Hide()
	self.frameStat.Hide()
	self.frameLstat.Hide()
	self.frameMmap.Hide()
	self.frameMunmap.Hide()
	self.frameMprotect.Hide()
	self.frameRt_sigaction.Hide()
	self.frameUname.Hide()
	self.frameTime.Hide()
	self.framePerTime.Hide()
	self.frameErr.Hide()
	self.framePerErr.Hide()
	self.frameCnt.Hide()

    def OnHome(self, e):
	self.framedisp.Show()
	self.framePert.Hide()
	self.framecomp.Hide()
	self.frameop.Hide()
	self.frameUnfin.Hide()
	self.frameProc.Hide()
	self.frameCode.Hide()
	self.frameErrana.Hide()
	self.frameFileio.Hide()
	self.frameSummary.Hide()
	self.frameRead.Hide()
	self.frameWrite.Hide()
	self.frameAccess.Hide()
	self.frameFstat.Hide()
	self.frameStat.Hide()
	self.frameLstat.Hide()
	self.frameMmap.Hide()
	self.frameMunmap.Hide()
	self.frameMprotect.Hide()
	self.frameRt_sigaction.Hide()
	self.frameUname.Hide()
	self.frameTime.Hide()
	self.framePerTime.Hide()
	self.frameErr.Hide()
	self.framePerErr.Hide()
	self.frameCnt.Hide()

    def OnPerti(self, e):
	self.framePert.Show()
	self.frameRead.Hide()
	self.frameWrite.Hide()
	self.frameAccess.Hide()
	self.frameFstat.Hide()
	self.frameStat.Hide()
	self.frameLstat.Hide()
	self.frameMmap.Hide()
	self.frameMunmap.Hide()
	self.frameMprotect.Hide()
	self.frameRt_sigaction.Hide()
	self.frameUname.Hide()

    def OnCompa(self, e):
	self.framecomp.Show()
	self.frameTime.Hide()
	self.framePerTime.Hide()
	self.frameErr.Hide()
	self.framePerErr.Hide()
	self.frameCnt.Hide()

    def disp(self):

	if not self.framedisp:
		self.framedisp = wx.Frame(self, -1, 'System Call Analyzer Output', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)

        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.framedisp.SetMenuBar(self.menubar)

	self.paneldisp = wx.Panel(self.framedisp)
	self.vboxdisp = wx.BoxSizer(wx.VERTICAL)

	self.hboxdisp1 = wx.BoxSizer(wx.HORIZONTAL)

#Particular System Call Statistics

	self.btnPert = wx.Button(self.paneldisp, label='Particular Syscall Statistics', size=(300, 100))
	self.btnPert.Bind(wx.EVT_BUTTON, self.OnPert)
	self.hboxdisp1.Add(self.btnPert, border=200)

	self.stdisp1 = wx.StaticText(self.paneldisp, label='            ')
	self.hboxdisp1.Add(self.stdisp1)

#Comparitive Statistics of all System Calls

	self.btnComp = wx.Button(self.paneldisp, label='Comparitive Syscall Statistics', size=(300, 100))
	self.btnComp.Bind(wx.EVT_BUTTON, self.OnComp)
	self.hboxdisp1.Add(self.btnComp, border=200)

	self.hboxdisp1.Add(self.stdisp1)

#Process Tree

	self.btnProc = wx.Button(self.paneldisp, label='Process Tree', size=(300, 100))
	self.btnProc.Bind(wx.EVT_BUTTON, self.OnProc)
	self.hboxdisp1.Add(self.btnProc, border=200)

	self.vboxdisp.Add(self.hboxdisp1, flag=wx.LEFT | wx.RIGHT | wx.TOP, border=100)
	self.vboxdisp.Add((-1, 10))

	self.hboxdisp2 = wx.BoxSizer(wx.HORIZONTAL)

#Syscall Trace

	self.btnTrace = wx.Button(self.paneldisp, label='System Call Trace', size=(300, 100))
	self.btnTrace.Bind(wx.EVT_BUTTON, self.OnTrace)
	self.hboxdisp2.Add(self.btnTrace, border=200)

	self.stdisp2 = wx.StaticText(self.paneldisp, label='            ')
	self.hboxdisp2.Add(self.stdisp2)

# Unfinished Syscall

	self.btnUnfin = wx.Button(self.paneldisp, label='Resumed-Unfinished \n System Calls', size=(300, 100))
	self.btnUnfin.Bind(wx.EVT_BUTTON, self.OnUnfin)
	self.hboxdisp2.Add(self.btnUnfin, border=200)

	self.hboxdisp2.Add(self.stdisp2)

# Code Optimization

	self.btnCode = wx.Button(self.paneldisp, label='Code Optimization', size=(300, 100))
	self.btnCode.Bind(wx.EVT_BUTTON, self.OnCode)
	self.hboxdisp2.Add(self.btnCode, border=200)

	self.vboxdisp.Add(self.hboxdisp2, flag=wx.LEFT | wx.RIGHT | wx.TOP, border=100)
	self.vboxdisp.Add((-1, 10))

	self.hboxdisp3 = wx.BoxSizer(wx.HORIZONTAL)

#File Input/Output Statistics

	self.btnFileio = wx.Button(self.paneldisp, label='File Input/Output Statistics', size=(300, 100))
	self.btnFileio.Bind(wx.EVT_BUTTON, self.OnFileio)
	self.hboxdisp3.Add(self.btnFileio, border=200)

	self.stdisp3 = wx.StaticText(self.paneldisp, label='            ')
	self.hboxdisp3.Add(self.stdisp3)

#Error Analysis

	self.btnErrana = wx.Button(self.paneldisp, label='Error Analysis', size=(300, 100))
	self.btnErrana.Bind(wx.EVT_BUTTON, self.OnErrana)
	self.hboxdisp3.Add(self.btnErrana, border=200)

	self.hboxdisp3.Add(self.stdisp3)

#Summary of All System Calls

	self.btnSummary = wx.Button(self.paneldisp, label='Summary of all \n System Calls', size=(300, 100))
	self.btnSummary.Bind(wx.EVT_BUTTON, self.OnSummary)
	self.hboxdisp3.Add(self.btnSummary, border=200)

	self.vboxdisp.Add(self.hboxdisp3, flag=wx.LEFT | wx.RIGHT | wx.TOP, border=100)
	self.vboxdisp.Add((-1, 10))

	self.paneldisp.SetSizer(self.vboxdisp)

	self.framedisp.Show()

# Button Cliks on Output Screen

	# Particular System Call Statistics

    def OnPert(self, e):
	if not self.framePert:
		self.framePert = wx.Frame(self, -1, 'Particular System Call Statistics', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)

        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.framePert.SetMenuBar(self.menubar)


	self.panelPert = wx.Panel(self.framePert)
	self.vboxPert = wx.BoxSizer(wx.VERTICAL)

#File Structure Related System Calls

	self.hboxPert1 = wx.BoxSizer(wx.HORIZONTAL)

	self.stPert1 = wx.StaticText(self.panelPert, label='          *** File Structure Related System Calls *** ')
	self.hboxPert1.Add(self.stPert1)

	self.vboxPert.Add(self.hboxPert1, flag=wx.LEFT | wx.RIGHT | wx.TOP, border=30)
	self.vboxPert.Add((-1, 10))

	self.hboxPert2 = wx.BoxSizer(wx.HORIZONTAL)

    # Read System Call

	self.sthbox2 = wx.StaticText(self.panelPert, label='                                        ')
	self.hboxPert2.Add(self.sthbox2)

	self.btnRead = wx.Button(self.panelPert, label='Read', size=(200, 75))
	self.btnRead.Bind(wx.EVT_BUTTON, self.OnRead)
	self.hboxPert2.Add(self.btnRead, border=50)

	self.hboxPert2.Add(self.sthbox2)

    # Write System Call

	self.btnWrite = wx.Button(self.panelPert, label='Write', size=(200, 75))
	self.btnWrite.Bind(wx.EVT_BUTTON, self.OnWrite)
	self.hboxPert2.Add(self.btnWrite, border=50)

	self.hboxPert2.Add(self.sthbox2)

    # Access System Call

	self.btnAccess = wx.Button(self.panelPert, label='Access', size=(200, 75))
	self.btnAccess.Bind(wx.EVT_BUTTON, self.OnAccess)
	self.hboxPert2.Add(self.btnAccess, border=50)

	self.vboxPert.Add(self.hboxPert2, flag=wx.LEFT | wx.RIGHT , border=30)
	self.vboxPert.Add((-1, 10))

	self.hboxPert3 = wx.BoxSizer(wx.HORIZONTAL)

    # Stat/Stat64 System Call

	self.sthbox3 = wx.StaticText(self.panelPert, label='                                        ')
	self.hboxPert3.Add(self.sthbox3)

	self.btnStat = wx.Button(self.panelPert, label='Stat/Stat64', size=(200, 75))
	self.btnStat.Bind(wx.EVT_BUTTON, self.OnStat)
	self.hboxPert3.Add(self.btnStat, border=50)

	self.hboxPert3.Add(self.sthbox3)

    # Fstat/Fstat64 System Call

	self.btnFstat = wx.Button(self.panelPert, label='Fstat/Fstat64', size=(200, 75))
	self.btnFstat.Bind(wx.EVT_BUTTON, self.OnFstat)
	self.hboxPert3.Add(self.btnFstat, border=50)

	self.hboxPert3.Add(self.sthbox3)

    # Lstat/Lstat64 System Call

	self.btnLstat = wx.Button(self.panelPert, label='Lstat/Lstat64', size=(200, 75))
	self.btnLstat.Bind(wx.EVT_BUTTON, self.OnLstat)
	self.hboxPert3.Add(self.btnLstat, border=50)

	self.vboxPert.Add(self.hboxPert3, flag=wx.LEFT | wx.RIGHT , border=30)
	self.vboxPert.Add((-1, 10))

#Memory Related System Calls

	self.hboxPert4 = wx.BoxSizer(wx.HORIZONTAL)

	self.stPert4 = wx.StaticText(self.panelPert, label='          *** Memory Related System Calls *** ')
	self.hboxPert4.Add(self.stPert4)

	self.vboxPert.Add(self.hboxPert4, flag=wx.LEFT | wx.RIGHT |wx.TOP, border=30)
	self.vboxPert.Add((-1, 10))

	self.hboxPert5 = wx.BoxSizer(wx.HORIZONTAL)

    # Mmap System Call

	self.sthbox5 = wx.StaticText(self.panelPert, label='                                        ')
	self.hboxPert5.Add(self.sthbox5)

	self.btnMmap = wx.Button(self.panelPert, label='Mmap', size=(200, 75))
	self.btnMmap.Bind(wx.EVT_BUTTON, self.OnMmap)
	self.hboxPert5.Add(self.btnMmap, border=50)

	self.hboxPert5.Add(self.sthbox5)

    # Mprotect System Call

	self.btnMprotect = wx.Button(self.panelPert, label='Mprotect', size=(200, 75))
	self.btnMprotect.Bind(wx.EVT_BUTTON, self.OnMprotect)
	self.hboxPert5.Add(self.btnMprotect, border=50)

	self.vboxPert.Add(self.hboxPert5, flag=wx.LEFT | wx.RIGHT , border=30)
	self.vboxPert.Add((-1, 10))

	self.hboxPert5.Add(self.sthbox5)

    # Munmap System Call

	self.btnMunmap = wx.Button(self.panelPert, label='Munmap', size=(200, 75))
	self.btnMunmap.Bind(wx.EVT_BUTTON, self.OnMunmap)
	self.hboxPert5.Add(self.btnMunmap, border=50)

#Signal Related System Calls

	self.hboxPert6 = wx.BoxSizer(wx.HORIZONTAL)

	self.stPert6 = wx.StaticText(self.panelPert, label='          *** Signals Related System Calls *** ')
	self.hboxPert6.Add(self.stPert6)

	self.vboxPert.Add(self.hboxPert6, flag=wx.LEFT | wx.RIGHT | wx.TOP, border=30)
	self.vboxPert.Add((-1, 10))

	self.hboxPert7 = wx.BoxSizer(wx.HORIZONTAL)

    # Rt_sigaction System Call

	self.stPert7 = wx.StaticText(self.panelPert, label='                                           ')
	self.hboxPert7.Add(self.stPert7)

	self.btnRt_sigaction = wx.Button(self.panelPert, label='Rt_sigaction', size=(200, 75))
	self.btnRt_sigaction.Bind(wx.EVT_BUTTON, self.OnRt_sigaction)
	self.hboxPert7.Add(self.btnRt_sigaction, border=50)

	self.vboxPert.Add(self.hboxPert7, flag=wx.LEFT | wx.RIGHT , border=30)
	self.vboxPert.Add((-1, 10))

#System Information

	self.hboxPert8 = wx.BoxSizer(wx.HORIZONTAL)

	self.stPert8 = wx.StaticText(self.panelPert, label='          *** System Information *** ')
	self.hboxPert8.Add(self.stPert8)

	self.vboxPert.Add(self.hboxPert8, flag=wx.LEFT | wx.RIGHT | wx.TOP, border=30)
	self.vboxPert.Add((-1, 10))

	self.hboxPert9 = wx.BoxSizer(wx.HORIZONTAL)

    # Uname System Call

	self.stPert9 = wx.StaticText(self.panelPert, label='                                           ')
	self.hboxPert9.Add(self.stPert9)

	self.btnUname = wx.Button(self.panelPert, label='Uname', size=(200, 75))
	self.btnUname.Bind(wx.EVT_BUTTON, self.OnUname)
	self.hboxPert9.Add(self.btnUname, border=50)
	self.stPert9 = wx.StaticText(self.panelPert, label='\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t')
	self.hboxPert9.Add(self.stPert9)
	self.btnInfo = wx.Button(self.panelPert, label='Information', size=(150, 50))
	self.btnInfo.Bind(wx.EVT_BUTTON, self.OnInfo)
	self.hboxPert9.Add(self.btnInfo,flag=wx.RIGHT | wx.BOTTOM, border = 10)

	self.vboxPert.Add(self.hboxPert9, flag=wx.LEFT | wx.RIGHT , border=30)
	self.vboxPert.Add((-1, 10))

	self.panelPert.SetSizer(self.vboxPert)
	self.framePert.Show()

	# Comparitive Statistics
 
    def OnComp(self, e):        
	if not self.framecomp:
		self.framecomp = wx.Frame(self, -1, 'Comparative Statistics of All System Calls ', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.framecomp.SetMenuBar(self.menubar)

	self.panelcomp = wx.Panel(self.framecomp)
	self.vboxcomp = wx.BoxSizer(wx.VERTICAL)

	self.hboxcomp1 = wx.BoxSizer(wx.HORIZONTAL)

#Time Consumed By all System Call

	self.stcomp1 = wx.StaticText(self.panelcomp, label='                  ')
	self.hboxcomp1.Add(self.stcomp1)

	self.btnTime = wx.Button(self.panelcomp, label='Time Consumption of Syscalls', size=(250, 100))
	self.btnTime.Bind(wx.EVT_BUTTON, self.OnTime)
	self.hboxcomp1.Add(self.btnTime, border=150)

	self.hboxcomp1.Add(self.stcomp1)

# Percentage Time Consumption of all System Calls

	self.btnPerTime = wx.Button(self.panelcomp, label='Percentage Time Consumption \n of Syscalls', size=(250, 100))
	self.btnPerTime.Bind(wx.EVT_BUTTON, self.OnPerTime)
	self.hboxcomp1.Add(self.btnPerTime, border=150)

	self.hboxcomp1.Add(self.stcomp1)

#System Call Count
	self.btnCnt = wx.Button(self.panelcomp, label='System Call Count', size=(250, 100))
	self.btnCnt.Bind(wx.EVT_BUTTON, self.OnCnt)
	self.hboxcomp1.Add(self.btnCnt, border=100)

	self.vboxcomp.Add(self.hboxcomp1, flag=wx.LEFT | wx.RIGHT | wx.TOP, border=200)
	self.vboxcomp.Add((-1, 10))

	self.hboxcomp2 = wx.BoxSizer(wx.HORIZONTAL)

# Errors in All System Calls

	self.stcomp2 = wx.StaticText(self.panelcomp, label='                                                                ')
	self.hboxcomp2.Add(self.stcomp2)

	self.btnErr = wx.Button(self.panelcomp, label='System Call Errors', size=(250, 100))
	self.btnErr.Bind(wx.EVT_BUTTON, self.OnErr)
	self.hboxcomp2.Add(self.btnErr, border=150)

	self.hboxcomp2.Add(self.stcomp2)

# Percentage Errors in All System Calls

	self.btnPerErr = wx.Button(self.panelcomp, label='Percentage Erors in System Calls', size=(250, 100))
	self.btnPerErr.Bind(wx.EVT_BUTTON, self.OnPerErr)
	self.hboxcomp2.Add(self.btnPerErr, border=150)

	self.vboxcomp.Add(self.hboxcomp2, flag=wx.LEFT | wx.RIGHT | wx.TOP, border=100)
	self.vboxcomp.Add((-1, 10))

	self.panelcomp.SetSizer(self.vboxcomp)

	self.framecomp.Show()

# Traceing of all System Calls

    def OnTrace(self, e):        
	if not self.frameop:
		self.frameop = wx.Frame(self, -1, 'System Call Trace Output', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.frameop.SetMenuBar(self.menubar)
	self.vboxop = wx.BoxSizer(wx.VERTICAL)
	self.panelop = wx.Panel(self.frameop)

	name = 'sysdisp'
	self.frameop = TestFrame(self,name)
	while len(column) > 0 : column.pop()
	self.frameop.Show()

# Tracing of Unfinished and Resumed System Calls

    def OnUnfin(self, e):        
	if not self.frameUnfin:
		self.frameUnfin = wx.Frame(self, -1, 'Unfinished And Resumed Calls Statistics', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.frameUnfin.SetMenuBar(self.menubar)

	self.panelUnfin = wx.Panel(self.frameUnfin)
	self.vboxUnfin = wx.BoxSizer(wx.VERTICAL)
	self.hboxUnfin = wx.BoxSizer(wx.HORIZONTAL)
	self.btnUnfin = wx.Button(self.panelUnfin, label='Unfinihed System Calls', size=(400, 150))
	self.btnUnfin.Bind(wx.EVT_BUTTON, self.OnUnfini)
	self.hboxUnfin.Add(self.btnUnfin, flag=wx.LEFT, border=150)
	self.btnResumed = wx.Button(self.panelUnfin, label='Resumed System Calls', size=(400, 150))
	self.btnResumed.Bind(wx.EVT_BUTTON, self.OnResumed)
	self.hboxUnfin.Add(self.btnResumed, flag=wx.LEFT, border=150)
	self.vboxUnfin.Add(self.hboxUnfin, flag=wx.TOP, border=200)

	self.panelUnfin.SetSizer(self.vboxUnfin)		        
	self.frameUnfin.Show()

# Process Tree Of System Calls

    def OnProc(self, e):        
	if not self.frameProc:
		self.frameProc = wx.Frame(self, -1, 'Process Tree', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.frameProc.SetMenuBar(self.menubar)

	self.panelProc = wx.Panel(self.frameProc)

	commands.getstatusoutput("python proctree.py")		

	#self.panelProc.SetSizer(self.vboxProc)		        
	self.frameProc.Show()

# Code Optimization

    def OnCode(self, e):        
	if not self.frameCode:
		self.frameCode = wx.Frame(self, -1, 'Code Optimization', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.frameCode.SetMenuBar(self.menubar)

	self.panelCode = wx.Panel(self.frameCode)
	self.vboxCode = wx.BoxSizer(wx.VERTICAL)

        self.hboxCode1 = wx.BoxSizer(wx.HORIZONTAL)
	self.stCode1 = wx.StaticText(self.panelCode, label='   1.  Please avoide using "\ n"(New Line Charector) whenever possible. (Instead \n \t  use "\ t"(Tab) if required) ')
	self.stCode1.SetFont(self.font)
	self.hboxCode1.Add(self.stCode1, flag=wx.LEFT, border=50)
	self.stCode11 = wx.StaticText(self.panelCode, label='      \t\t\t\t\t')
	self.stCode11.SetFont(self.font)
	self.hboxCode1.Add(self.stCode11, flag=wx.CENTER, border=50)
	self.btnrefer1 = wx.Button(self.panelCode, label='REFER', size=(75, 35))
	self.btnrefer1.Bind(wx.EVT_BUTTON, self.OnRefer1)
	self.hboxCode1.Add(self.btnrefer1, flag=wx.RIGHT, border=50)
	self.vboxCode.Add(self.hboxCode1, flag=wx.EXPAND | wx.CENTER | wx.TOP, border=50)
	self.vboxCode.Add((-1, 10))

	self.hboxCode2 = wx.BoxSizer(wx.HORIZONTAL)
	self.stCode2 = wx.StaticText(self.panelCode, label='   2.  Please avoide using "fflush()" function whenever possible ')
	self.stCode2.SetFont(self.font)
	self.hboxCode2.Add(self.stCode2, flag=wx.LEFT, border=50)
	self.stCode22 = wx.StaticText(self.panelCode, label='     \t\t\t\t\t\t\t\t')
	self.stCode22.SetFont(self.font)
	self.hboxCode2.Add(self.stCode22, flag=wx.CENTER, border=50)
	self.btnrefer2 = wx.Button(self.panelCode, label='REFER', size=(75, 35))
	self.btnrefer2.Bind(wx.EVT_BUTTON, self.OnRefer2)
	self.hboxCode2.Add(self.btnrefer2, flag=wx.RIGHT, border=50)
	self.vboxCode.Add(self.hboxCode2, flag=wx.EXPAND | wx.CENTER | wx.TOP, border=50)
	self.vboxCode.Add((-1, 10))

        self.hboxCode3 = wx.BoxSizer(wx.HORIZONTAL)
	self.stCode3 = wx.StaticText(self.panelCode, label='   3.  Generally "Pass By Reference" is always better than "Pass By Value" ')
	self.stCode3.SetFont(self.font)
	self.hboxCode3.Add(self.stCode3, flag=wx.LEFT, border=50)
	self.stCode33 = wx.StaticText(self.panelCode, label='\t\t\t\t\t\t')
	self.stCode33.SetFont(self.font)
	self.hboxCode3.Add(self.stCode33, flag=wx.CENTER, border=50)
	self.btnrefer3 = wx.Button(self.panelCode, label='REFER', size=(75, 35))
	#self.btnrefer3.Bind(wx.EVT_BUTTON, self.OnRefer3)
	self.hboxCode3.Add(self.btnrefer3, flag=wx.RIGHT, border=50)
	self.vboxCode.Add(self.hboxCode3, flag=wx.EXPAND | wx.CENTER | wx.TOP, border=50)
	self.vboxCode.Add((-1, 10))

        self.hboxCode4 = wx.BoxSizer(wx.HORIZONTAL)
	self.stCode4 = wx.StaticText(self.panelCode, label='   4.  While performing "File Operations" is is better to use array or \n \t  string( E.g. gets() ) rather than using single charector( E.g. getch() ) ')
	self.stCode4.SetFont(self.font)
	self.hboxCode4.Add(self.stCode4, flag=wx.LEFT, border=50)
	self.stCode44 = wx.StaticText(self.panelCode, label=' \t\t\t\t\t\t')
	self.stCode44.SetFont(self.font)
	self.hboxCode4.Add(self.stCode44, flag=wx.CENTER, border=50)
	self.btnrefer4 = wx.Button(self.panelCode, label='REFER', size=(75, 35))
	#self.btnrefer4.Bind(wx.EVT_BUTTON, self.OnRefer4)
	self.hboxCode4.Add(self.btnrefer4, flag=wx.RIGHT, border=50)
	self.vboxCode.Add(self.hboxCode4, flag=wx.EXPAND | wx.CENTER | wx.TOP, border=50)
	self.vboxCode.Add((-1, 10))

        self.hboxCode5 = wx.BoxSizer(wx.HORIZONTAL)
	self.stCode5 = wx.StaticText(self.panelCode, label='   5.  Generally "While" and "Do-While" loops gives Better performance than "For" loop ')
	self.stCode5.SetFont(self.font)
	self.hboxCode5.Add(self.stCode5, flag=wx.LEFT, border=50)
	self.stCode55 = wx.StaticText(self.panelCode, label='\t\t\t')
	self.stCode55.SetFont(self.font)
	self.hboxCode5.Add(self.stCode55, flag=wx.CENTER, border=50)
	self.btnrefer5 = wx.Button(self.panelCode, label='REFER', size=(75, 35))
	#self.btnrefer5.Bind(wx.EVT_BUTTON, self.OnRefer5)
	self.hboxCode5.Add(self.btnrefer5, flag=wx.RIGHT, border=50)
	self.vboxCode.Add(self.hboxCode5, flag=wx.EXPAND | wx.CENTER | wx.TOP, border=50)
	self.vboxCode.Add((-1, 10))

	self.panelCode.SetSizer(self.vboxCode)		        
	self.frameCode.Show()

# File Input/Output Statistics

    def OnFileio(self, e):        
	if not self.frameFileio:
		self.frameFileio = wx.Frame(self, -1, 'File Input/Output Statistics', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
	self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.frameFileio.SetMenuBar(self.menubar)

	commands.getstatusoutput("python fileio.py")
	name = "fileio_tab"		
	self.frameFileio = TestFrame(self,name)
	while len(column) > 0 : column.pop()
	self.frameFileio.Show()

# Errana Of All System Calls

    def OnErrana(self, e):        
	if not self.frameErrana:
		self.frameErrana = wx.Frame(self, -1, 'Error Analysis', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.frameErrana.SetMenuBar(self.menubar)

	commands.getstatusoutput("python errana.py")
	name = "errors_tab"		
	self.frameErrana = TestFrame(self,name)
	while len(column) > 0 : column.pop()
	self.frameErrana.Show()

# Summary Of All System Calls

    def OnSummary(self, e):        
	if not self.frameSummary:
		self.frameSummary = wx.Frame(self, -1, 'Summary of All System Calls', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.frameSummary.SetMenuBar(self.menubar)
	commands.getstatusoutput("python summary.py")
	name = "summary_tab"		
	self.frameSummary = TestFrame(self,name)
	while len(column) > 0 : column.pop()
	self.frameSummary.Show()

# Particular System Calls

	# Read System Call

    def OnRead(self, e):        
	if not self.frameRead:
		self.frameRead = wx.Frame(self, -1, 'Perticular System Call Statistics : READ', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.fitem3 = self.fileMenu.Append(ID_FILE_PERT, 'Particular', 'Particular Syscalls')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.Bind(wx.EVT_MENU, self.OnPerti, self.fitem3)
        self.frameRead.SetMenuBar(self.menubar)

	self.panelRead = wx.Panel(self.frameRead)

	self.vboxRead = wx.BoxSizer(wx.VERTICAL)
	self.hboxRead1 = wx.BoxSizer(wx.HORIZONTAL)
	#self.pnlRead1 = wx.Panel(self.hboxRead1, -1, style=wx.SIMPLE_BORDER)
	#self.hboxRead1.Add(self.pnlRead1, 1, wx.EXPAND | wx.ALL, 3)

	self.tcRead = wx.TextCtrl(self.panelRead, wx.ID_ANY, size=(800,50), style = wx.TE_MULTILINE | wx.TE_READONLY | wx.VSCROLL)
        self.font.SetPointSize(13)
        self.tcRead.SetFont(self.font)
	self.tcRead.SetValue(" Read System Call gives the information about number of bytes read from file specified by Particular file descriptor ")
	self.hboxRead1.Add(self.tcRead, border=100)
	self.vboxRead.Add(self.hboxRead1, flag=wx.CENTER | wx.TOP, border=10)
	self.vboxRead.Add((-1, 10))


	'''
	self.hboxRead2 = wx.BoxSizer(wx.HORIZONTAL)
	self.lineRead2 = wx.StaticLine(self.panelRead)
        self.hboxRead2.Add(self.lineRead2, flag=wx.EXPAND | wx.CENTER, border=10)
	self.vboxRead.Add(self.hboxRead2, flag=wx.CENTER | wx.TOP, border=10)
	self.vboxRead.Add((-1, 10))
	'''

	commands.getstatusoutput("python pread.py")

	self.hboxRead3 = wx.BoxSizer(wx.HORIZONTAL)
	self.vboxRead31 = wx.BoxSizer(wx.VERTICAL)

        self.imgRead = wx.EmptyImage(800,500)
	self.imgReadCtrl = wx.StaticBitmap(self.panelRead, wx.ID_ANY, wx.BitmapFromImage(self.imgRead))

	self.persyscallstat('read_tab')
	filepath = "Graphs/readgrapg.png"
	self.imgRead = wx.Image(filepath, wx.BITMAP_TYPE_ANY)
	self.imgReadCtrl.SetBitmap(wx.BitmapFromImage(self.imgRead))

	self.vboxRead31.Add(self.imgReadCtrl, flag=wx.EXPAND | wx.RIGHT | wx.TOP, border=20)
	self.vboxRead31.Add((-1, 10))
	self.hboxRead3.Add(self.vboxRead31, flag=wx.LEFT , border=10)
	self.hboxRead3.Add((-1, 10))

	self.vboxRead32 = wx.BoxSizer(wx.VERTICAL)
	self.hboxRead31 = wx.BoxSizer(wx.HORIZONTAL)

	name = 'read_tab'		

	self.vboxRead32.Add(self.hboxRead31, flag=wx.RIGHT | wx.TOP, border=10)
	self.vboxRead32.Add((-1, 10))

	self.hboxRead32 = wx.BoxSizer(wx.HORIZONTAL)
	self.tcRead32 = wx.TextCtrl(self.panelRead, wx.ID_ANY, size=(250,250), style = wx.TE_MULTILINE | wx.TE_READONLY | wx.VSCROLL)
        self.font.SetPointSize(13)
        self.tcRead32.SetFont(self.font)
	self.tcRead32.SetValue(" Read System Call gives the information about number of bytes read from file specified by Particular file descriptor ")
	self.hboxRead32.Add(self.tcRead32, border=100)

	self.vboxRead32.Add(self.hboxRead32, flag=wx.RIGHT | wx.BOTTOM, border=10)
	self.vboxRead32.Add((-1, 10))
	
	self.hboxRead3.Add(self.vboxRead32, flag=wx.RIGHT | wx.BOTTOM, border=10)
	self.hboxRead3.Add((-1, 10))

	self.vboxRead.Add(self.hboxRead3, flag=wx.CENTER | wx.BOTTOM, border=10)
	self.vboxRead.Add((-1, 10))

	self.panelRead.SetSizer(self.vboxRead)		        
	self.frameRead.Show()

	# Write System Call

    def OnWrite(self, e):        
	if not self.frameWrite:
		self.frameWrite = wx.Frame(self, -1, 'Perticular System Call Statistics : WRITE', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.fitem3 = self.fileMenu.Append(ID_FILE_PERT, 'Particular', 'Particular Syscalls')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.Bind(wx.EVT_MENU, self.OnPerti, self.fitem3)
        self.frameWrite.SetMenuBar(self.menubar)

	self.panelWrite = wx.Panel(self.frameWrite)

	self.vboxWrite = wx.BoxSizer(wx.VERTICAL)
	self.hboxWrite1 = wx.BoxSizer(wx.HORIZONTAL)
	self.tcWrite = wx.TextCtrl(self.panelWrite, wx.ID_ANY, size=(800,50), style = wx.TE_MULTILINE | wx.TE_READONLY | wx.VSCROLL)
        self.font.SetPointSize(13)
        self.tcWrite.SetFont(self.font)
	self.tcWrite.SetValue(" Write System Call gives the information about number of bytes Write from file specified by Particular file descriptor ")
	self.hboxWrite1.Add(self.tcWrite, border=100)
	self.vboxWrite.Add(self.hboxWrite1, flag=wx.CENTER | wx.TOP, border=10)
	self.vboxWrite.Add((-1, 10))

	commands.getstatusoutput("python pwrite.py")
	name = 'write_tab'		

	self.panelWrite.SetSizer(self.vboxWrite)		        
	self.frameWrite.Show()

	# Access System Call

    def OnAccess(self, e):        
	if not self.frameAccess:
		self.frameAccess = wx.Frame(self, -1, 'Perticular System Call Statistics : ACCESS', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.fitem3 = self.fileMenu.Append(ID_FILE_PERT, 'Particular', 'Particular Syscalls')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.Bind(wx.EVT_MENU, self.OnPerti, self.fitem3)
        self.frameAccess.SetMenuBar(self.menubar)
	commands.getstatusoutput("python paccess.py")
	name = 'access_tab'		
	self.frameAccess = TestFrame(self,name)
	while len(column) > 0 : column.pop()

	# Fstat System Call

    def OnFstat(self, e):        
	if not self.frameFstat:
		self.frameFstat = wx.Frame(self, -1, 'Perticular System Call Statistics : FSTAT', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.fitem3 = self.fileMenu.Append(ID_FILE_HOME, 'Particular', 'Particular Syscalls')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.Bind(wx.EVT_MENU, self.OnPerti, self.fitem3)
        self.frameFstat.SetMenuBar(self.menubar)
	
	commands.getstatusoutput("python pfstat.py")
	name = 'fstat_tab'		
	self.frameFstat = TestFrame(self,name)
	while len(column) > 0 : column.pop()
	self.frameFstat.Show()

	# Stat System Call

    def OnStat(self, e):        
	if not self.frameStat:
		self.frameStat = wx.Frame(self, -1, 'Perticular System Call Statistics : STAT', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.fitem3 = self.fileMenu.Append(ID_FILE_PERT, 'Particular', 'Particular Syscalls')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.Bind(wx.EVT_MENU, self.OnPerti, self.fitem3)
        self.frameStat.SetMenuBar(self.menubar)

	commands.getstatusoutput("python pstat.py")
	name = 'stat_tab'		
	self.frameStat = TestFrame(self,name)
	while len(column) > 0 : column.pop()
	self.frameStat.Show()

	# Lstat System Call

    def OnLstat(self, e):        
	if not self.frameLstat:
		self.frameLstat = wx.Frame(self, -1, 'Perticular System Call Statistics : Lstat', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.fitem3 = self.fileMenu.Append(ID_FILE_PERT, 'Particular', 'Particular Syscalls')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.Bind(wx.EVT_MENU, self.OnPerti, self.fitem3)
        self.frameLstat.SetMenuBar(self.menubar)

	commands.getstatusoutput("python plstat.py")
	name = 'lstat_tab'		
	self.frameLstat = TestFrame(self,name)
	while len(column) > 0 : column.pop()
	self.frameLstat.Show()

	# Mmap System Call

    def OnMmap(self, e):        
	if not self.frameMmap:
		self.frameMmap = wx.Frame(self, -1, 'Perticular System Call Statistics : READ', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.fitem3 = self.fileMenu.Append(ID_FILE_PERT, 'Particular', 'Particular Syscalls')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.Bind(wx.EVT_MENU, self.OnPerti, self.fitem3)
        self.frameMmap.SetMenuBar(self.menubar)

	commands.getstatusoutput("python pmmap.py")
	name = 'mmap_tab'		
	self.frameMmap = TestFrame(self,name)
	while len(column) > 0 : column.pop()
	self.frameMmap.Show()

	# Mprotect System Call

    def OnMprotect(self, e):        
	if not self.frameMprotect:
		self.frameMprotect = wx.Frame(self, -1, 'Perticular System Call Statistics : MPROTECT', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.fitem2 = self.fileMenu.Append(ID_FILE_PERT, 'Particular', 'Particular Syscalls')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.Bind(wx.EVT_MENU, self.OnPerti, self.fitem3)
        self.frameMprotect.SetMenuBar(self.menubar)

	commands.getstatusoutput("python pmprotect.py")
	name = 'mprotect_tab'		
	self.frameMprotect = TestFrame(self,name)
	while len(column) > 0 : column.pop()
	self.frameMprotect.Show()

	# Munmap System Call

    def OnMunmap(self, e):        
	if not self.frameMunmap:
		self.frameMunmap = wx.Frame(self, -1, 'Particular System Call Statistics : MUNMAP', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.fitem3 = self.fileMenu.Append(ID_FILE_PERT, 'Particular', 'Particular Syscalls')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.Bind(wx.EVT_MENU, self.OnPerti, self.fitem3)
        self.frameMunmap.SetMenuBar(self.menubar)

	commands.getstatusoutput("python pmunmap.py")
	name = 'munmap_tab'		
	self.frameMunmap = TestFrame(self,name)
	while len(column) > 0 : column.pop()
	self.frameMunmap.Show()

	# Rt_sigaction System Call

    def OnRt_sigaction(self, e):        
	if not self.frameRt_sigaction:
		self.frameRt_sigcation = wx.Frame(self, -1, 'Perticular System Call Statistics : RT_SIGACTION', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.fitem3 = self.fileMenu.Append(ID_FILE_PERT, 'Particular', 'Particular Syscalls')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.Bind(wx.EVT_MENU, self.OnPerti, self.fitem3)
        self.frameRt_sigaction.SetMenuBar(self.menubar)

	commands.getstatusoutput("python sigaction1.py")
	name = 'rt_sigaction_tab'		
	self.frameRt_sigaction = TestFrame(self,name)
	while len(column) > 0 : column.pop()
	self.frameRt_sigaction.Show()

	# Uname System Call

    def OnUname(self, e):        
	if not self.frameUname:
		self.frameUname = wx.Frame(self, -1, 'Perticular System Call Statistics : UNAME', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.fitem3 = self.fileMenu.Append(ID_FILE_PERT, 'Particular', 'Particular Syscalls')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.Bind(wx.EVT_MENU, self.OnPerti, self.fitem3)
        self.frameUname.SetMenuBar(self.menubar)

	commands.getstatusoutput("python punam.py")
	name = 'uname_tab'		
	self.frameUname = TestFrame(self,name)
	while len(column) > 0 : column.pop()
	self.frameUname.Show()

# Information of All System Calls

    def OnInfo(self, e):        
	if not self.frameInfo:
		self.frameInfo = wx.Frame(self, -1, 'Information of All System Calls in Particular Statistics', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.frameInfo.SetMenuBar(self.menubar)

	self.panelInfo = wx.Panel(self.frameInfo)
	self.vboxInfo = wx.BoxSizer(wx.VERTICAL)

        self.hboxInfo1 = wx.BoxSizer(wx.HORIZONTAL)
	self.tcInfo1 = wx.TextCtrl(self.panelInfo, wx.ID_ANY, size=(1200,600), style = wx.TE_MULTILINE | wx.TE_READONLY | wx.VSCROLL)
        self.font.SetPointSize(13)
        self.tcInfo1.SetFont(self.font)
	self.tcInfo1.AppendText("   1. Read     : \n\t\t Structure: ssize_t read(int fd, void *buf, size_t count); \n\t\t Read system call reads data, in bytes as specified by the caller, from the file specified in terms of fid and stores then into a buffer supplied \t\t\t by the calling process.\n\n")

	self.tcInfo1.AppendText("   2. Write    : \n\t\t Structure: size_t write(int fd, const void *buf, size_t nbytes); \n\t\t Write system call writes data, in bytes as specified by the caller, from a buffer declared by the user in the program and then writes it into \t\t\t the file specified in terms of fid supplied by the calling process.\n\n")

	self.tcInfo1.AppendText("   3. Access   : \n\t\t Structure: int access(const char *pathname, int mode);\n\t\t The access system call determines whether the calling process has access permission to a file. It can check any combination of read, write, \t\t\t and execute permission, and it can also check for a file's existence.\n\n")

	self.tcInfo1.AppendText("   4. Fstat/Fstat64   : \n\t\t Structure: int fstat(int fd, struct stat *buf);\n\t\t The fstat system call takes a file descriptor as argument and returns attributes of the file that it identifies in a struct stat structure. While \t\t\t fstat64 return attributes in a struct stat64 structure, which represents file sizes with a 64-bit type, allowing the functions to work on files \t\t\t 2 GB and larger.\n\n")

	self.tcInfo1.AppendText("   5. Stat/Stat64   : \n\t\t Structure: int stat(const char *path, struct stat *buf);\n\t\t The stat system call take a filename as argument and returns attributes of the file. If the file name is a symbolic link, it returns attributes \t\t of the eventual target of the link. While stat64 return attributes in a struct stat64 structure, which represents file sizes with a 64-bit \n\t\t type, allowing the functions to work on files 2 GB and larger.\n\n")

	self.tcInfo1.AppendText("   6. Lstat/Lstat64   : \n\t\t Structure: int lstat(const char *path, struct stat *buf);\n\t\t The lstat functions take a filename as argument and returns attributes of the file. If the file name is a symbolic link, it returns attributes of \t\t\t the link itself. While ltat64 return attributes in a struct stat64 structure, which represents file sizes with a 64-bit type, allowing the \t\t\t functions to work on files 2 GB and larger.\n\n")

	self.tcInfo1.AppendText("   7. Mprotect   : \n\t\t Structure: int mprotect(const void *addr, size_t len, int prot);\n\t\t The system call mprotect specifies the desired protection for the memory page(s) containing part or all of the interval [addr,addr+len-1]. If \t\t\t an access is disallowed by the protection given it, the program receives a SIGSEGV.\n\n")

	self.tcInfo1.AppendText("   8. Munmap   : \n\t\t Structure: int munmap(void *start, size_t length);\n\t\t The munmap system call deletes the mappings for the specified address range, and causes further references to addresses within the range \t\t\t to generate invalid memory references.\n\n")

	self.tcInfo1.AppendText("   9. Mmap   : \n\t\t Structure: void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);\n\t\t mmap asks the kernel to map len bytes of the object represented by the file descriptorfd, starting at offsetbytes into the file, into memory. \t\t\t That maps files or devices into memory. It is a method of memory-mapped file I/O.It used to map a file into memory so that then you can \t\t\t read and/or write the data in the file by accessing memory - no need for file I/O directly.\n\n")

	self.tcInfo1.AppendText("   10. Rt_sigaction   : \n\t\t Structure: int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);\n\t\t The sigaction system call is used to change the action taken by a process on receipt of a specific signal. system call allows users to specify \t\t\t an action for a signal; of course, if no signal action is defined, the kernel executes the default action associated with the delivered signal.\n\n")

	self.tcInfo1.AppendText("   11. Uname   : \n\t\tThe uname system call gives informatio about System.\n\n")

	self.hboxInfo1.Add(self.tcInfo1, flag=wx.LEFT, border=50)
	self.vboxInfo.Add(self.hboxInfo1, flag=wx.EXPAND | wx.CENTER | wx.TOP, border=50)
	self.vboxInfo.Add((-1, 10))

	self.panelInfo.SetSizer(self.vboxInfo)		        
	self.frameInfo.Show()

# Comparitive Statistics

	# Time Graph

    def OnTime(self, e):
	if not self.frameTime:
		self.frameTime = wx.Frame(self, -1, 'Time Consumption of All System Calls', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.fitem3 = self.fileMenu.Append(ID_FILE_COMP, 'Comparative', 'Comparative Study of Syscalls')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.Bind(wx.EVT_MENU, self.OnCompa, self.fitem3)
        self.frameTime.SetMenuBar(self.menubar)

	self.panelTime = wx.Panel(self.frameTime)

	self.vboxTime = wx.BoxSizer(wx.VERTICAL)
	
        self.PhotoMaxSize = 400
        self.imgtime = wx.EmptyImage(800,400)
	self.imgtimeCtrl = wx.StaticBitmap(self.panelTime, wx.ID_ANY, wx.BitmapFromImage(self.imgtime))

	filepath = "Graphs/pie.png"
	self.imgtime = wx.Image(filepath, wx.BITMAP_TYPE_ANY)
	'''
	# scale the image, preserving the aspect ratio
	W = self.imgtime.GetWidth()
	H = self.imgtime.GetHeight()

	
	if W > H:
	    NewW = self.PhotoMaxSize
	    NewH = self.PhotoMaxSize * H / W
	else:
	    NewH = self.PhotoMaxSize
	    NewW = self.PhotoMaxSize * W / H

	self.imgtime = self.imgtime.Scale(NewW,NewH)
	''' 
	self.imgtimeCtrl.SetBitmap(wx.BitmapFromImage(self.imgtime))

	self.vboxTime.Add(self.imgtimeCtrl, flag=wx.EXPAND | wx.CENTER | wx.TOP, border=20)

	self.vboxTime.Add((-1, 10))

	self.tcTime = wx.TextCtrl(self.panelTime, wx.ID_ANY, size=(400,50), style = wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL | wx.VSCROLL)

	self.tcTime.AppendText("The maximum time was Consumed by System Call: \t")
	
	commands.getstatusoutput("python ctime.py")
	name = 'time_tab'

	self.vboxTime.Add(self.tcTime, flag=wx.EXPAND | wx.CENTER | wx.BOTTOM, border=20)

	self.vboxTime.Add((-1, 10))

	self.panelTime.SetSizer(self.vboxTime)
	self.frameTime.Show()

	# Percentage Time Graph

    def OnPerTime(self, e):        
	if not self.framePerTime:
		self.framePerTime = wx.Frame(self, -1, 'Percentage Time Consumption of All System Calls', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.fitem3 = self.fileMenu.Append(ID_FILE_COMP, 'Comparative', 'Comparative Study of Syscalls')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.Bind(wx.EVT_MENU, self.OnCompa, self.fitem3)
        self.framePerTime.SetMenuBar(self.menubar)

	self.panelPerTime = wx.Panel(self.framePerTime)

	self.vboxPerTime = wx.BoxSizer(wx.VERTICAL)
	
        self.imgPerTime = wx.EmptyImage(800,400)
	self.imgPerTimeCtrl = wx.StaticBitmap(self.panelPerTime, wx.ID_ANY, wx.BitmapFromImage(self.imgPerTime))

	filepath = "Graphs/pie.png"
	self.imgPerTime = wx.Image(filepath, wx.BITMAP_TYPE_ANY)
	self.imgPerTimeCtrl.SetBitmap(wx.BitmapFromImage(self.imgPerTime))

	self.vboxPerTime.Add(self.imgPerTimeCtrl, flag=wx.EXPAND | wx.CENTER | wx.TOP, border=20)

	self.vboxPerTime.Add((-1, 10))

	self.tcPerTime = wx.TextCtrl(self.panelPerTime, wx.ID_ANY, size=(400,50), style = wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL | wx.VSCROLL)

	self.tcPerTime.AppendText("The maximum PerTime was Consumed by System Call: \t")
	
	commands.getstatusoutput("python ctime_per.py")
	name = 'pertime_tab'

	self.vboxPerTime.Add(self.tcPerTime, flag=wx.EXPAND | wx.CENTER | wx.BOTTOM, border=20)

	self.vboxPerTime.Add((-1, 10))

	self.panelPerTime.SetSizer(self.vboxPerTime)
		        
	self.framePerTime.Show()

	# Error Graph

    def OnErr(self, e):        
	if not self.frameErr:
		self.frameErr = wx.Frame(self, -1, 'Errors in All System Calls', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.fitem3 = self.fileMenu.Append(ID_FILE_COMP, 'Comparative', 'Comparative Study of Syscalls')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.Bind(wx.EVT_MENU, self.OnCompa, self.fitem3)
        self.frameErr.SetMenuBar(self.menubar)

	self.panelErr = wx.Panel(self.frameErr)

	self.vboxErr = wx.BoxSizer(wx.VERTICAL)
	
        self.imgErr = wx.EmptyImage(800,400)
	self.imgErrCtrl = wx.StaticBitmap(self.panelErr, wx.ID_ANY, wx.BitmapFromImage(self.imgErr))

	filepath = "Graphs/pie.png"
	self.imgErr = wx.Image(filepath, wx.BITMAP_TYPE_ANY)
	self.imgErrCtrl.SetBitmap(wx.BitmapFromImage(self.imgErr))

	self.vboxErr.Add(self.imgErrCtrl, flag=wx.EXPAND | wx.CENTER | wx.TOP, border=20)

	self.vboxErr.Add((-1, 10))

	self.tcErr = wx.TextCtrl(self.panelErr, wx.ID_ANY, size=(400,50), style = wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL | wx.VSCROLL)

	self.tcErr.AppendText("The maximum Errors were occured in System Call: \t")
	
	commands.getstatusoutput("python cerror.py")
	name = 'error_tab'

	self.vboxErr.Add(self.tcErr, flag=wx.EXPAND | wx.CENTER | wx.BOTTOM, border=20)

	self.vboxErr.Add((-1, 10))

	self.panelErr.SetSizer(self.vboxErr)
		        
	self.frameErr.Show()

	# Percentage of Errors of system calls

    def OnPerErr(self, e):        
	if not self.framePerErr:
		self.framePerErr = wx.Frame(self, -1, 'Time Consumption of All System Calls', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.fitem3 = self.fileMenu.Append(ID_FILE_COMP, 'Comparative', 'Comparative Study of Syscalls')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.Bind(wx.EVT_MENU, self.OnCompa, self.fitem3)
        self.framePerErr.SetMenuBar(self.menubar)

	self.panelPerErr = wx.Panel(self.framePerErr)

	self.vboxPerErr = wx.BoxSizer(wx.VERTICAL)
	
        self.imgPerErr = wx.EmptyImage(800,400)
	self.imgPerErrCtrl = wx.StaticBitmap(self.panelPerErr, wx.ID_ANY, wx.BitmapFromImage(self.imgPerErr))

	filepath = "Graphs/pie.png"
	self.imgPerErr = wx.Image(filepath, wx.BITMAP_TYPE_ANY)
	self.imgPerErrCtrl.SetBitmap(wx.BitmapFromImage(self.imgPerErr))

	self.vboxPerErr.Add(self.imgPerErrCtrl, flag=wx.EXPAND | wx.CENTER | wx.TOP, border=20)

	self.vboxPerErr.Add((-1, 10))

	self.tcPerErr = wx.TextCtrl(self.panelPerErr, wx.ID_ANY, size=(400,50), style = wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL | wx.VSCROLL)

	self.tcPerErr.AppendText("The maximum Error was Consumed by System Call: \t")
	
	commands.getstatusoutput("python cper_error.py")
	name = 'pererror_tab'

	self.vboxPerErr.Add(self.tcPerErr, flag=wx.EXPAND | wx.CENTER | wx.BOTTOM, border=20)

	self.vboxPerErr.Add((-1, 10))

	self.panelPerErr.SetSizer(self.vboxPerErr)
		        
	self.framePerErr.Show()

	# Count of all System Calls

    def OnCnt(self, e):        
	if not self.frameCnt:
		self.frameCnt = wx.Frame(self, -1, 'Time Consumption of All System Calls', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.fitem3 = self.fileMenu.Append(ID_FILE_COMP, 'Comparative', 'Comparative Study of Syscalls')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.Bind(wx.EVT_MENU, self.OnCompa, self.fitem3)
        self.frameCnt.SetMenuBar(self.menubar)

	self.panelCnt = wx.Panel(self.frameCnt)

	self.vboxCnt = wx.BoxSizer(wx.VERTICAL)
	
        self.imgCnt = wx.EmptyImage(800,400)
	self.imgCntCtrl = wx.StaticBitmap(self.panelCnt, wx.ID_ANY, wx.BitmapFromImage(self.imgCnt))

	filepath = "Graphs/pie.png"
	self.imgCnt = wx.Image(filepath, wx.BITMAP_TYPE_ANY)
	self.imgCntCtrl.SetBitmap(wx.BitmapFromImage(self.imgCnt))

	self.vboxCnt.Add(self.imgCntCtrl, flag=wx.EXPAND | wx.CENTER | wx.TOP, border=20)

	self.vboxCnt.Add((-1, 10))

	self.tcCnt = wx.TextCtrl(self.panelCnt, wx.ID_ANY, size=(400,50), style = wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL | wx.VSCROLL)

	self.tcCnt.AppendText("The System Call which got called maximum times is: \t")
	
	commands.getstatusoutput("python ccount.py")
	name = 'count_tab'

	self.vboxCnt.Add(self.tcCnt, flag=wx.EXPAND | wx.CENTER | wx.BOTTOM, border=20)

	self.vboxCnt.Add((-1, 10))

	self.panelCnt.SetSizer(self.vboxCnt)
		        
	self.frameCnt.Show()

# Unfinished  System Calls

    def OnUnfini(self, e):        
	if not self.frameUnfini:
		self.frameUnfini = wx.Frame(self, -1, 'Unfinished System Calls', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.frameUnfini.SetMenuBar(self.menubar)
	self.vboxop = wx.BoxSizer(wx.VERTICAL)
	self.panelop = wx.Panel(self.frameop)

	name = 'unfinished'
	self.frameUnfini = TestFrame(self,name)
	while len(column) > 0 : column.pop()
	self.frameUnfini.Show()

# Resumed System Calls

    def OnResumed(self, e):        
	if not self.frameResumed:
		self.frameResumed = wx.Frame(self, -1, 'Resumed System Calls', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.frameResumed.SetMenuBar(self.menubar)
	self.vboxop = wx.BoxSizer(wx.VERTICAL)
	self.panelop = wx.Panel(self.frameop)

	name = 'resumed'
	self.frameResumed = TestFrame(self,name)
	while len(column) > 0 : column.pop()
	self.frameResumed.Show()

#Click on refer button1

    def OnRefer1(self, e):        
	if not self.frameRefer1:
		self.frameRefer1 = wx.Frame(self, -1, 'Refer1 Optimization : Escape Charactors', pos = (25,25), size = (1300,700), style = wx.RESIZE_BORDER | wx.CLOSE_BOX)
        self.menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fitem = self.fileMenu.Append(ID_FILE_OPEN, 'Quit', 'Quit application')
        self.fitem1 = self.fileMenu.Append(ID_FILE_INPUT, 'Main', 'System Call Analyzer')
        self.fitem2 = self.fileMenu.Append(ID_FILE_HOME, 'Home', 'System Call Analyzer Output')
        self.menubar.Append(self.fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnQuit, self.fitem)
        self.Bind(wx.EVT_MENU, self.OnInput, self.fitem1)
        self.Bind(wx.EVT_MENU, self.OnHome, self.fitem2)
        self.frameRefer1.SetMenuBar(self.menubar)

	self.panelRefer1 = wx.Panel(self.frameRefer1)

	self.hboxRefer = wx.BoxSizer(wx.HORIZONTAL)

	self.vboxRefer1 = wx.BoxSizer(wx.VERTICAL)

	self.hboxRefer13 = wx.BoxSizer(wx.HORIZONTAL)
	self.stRefer13 = wx.StaticText(self.panelRefer1, label='Using \ n')
	self.stRefer13.SetFont(self.font)
	self.hboxRefer13.Add(self.stRefer13, flag=wx.CENTER, border=50)
	self.vboxRefer1.Add(self.hboxRefer13, flag=wx.EXPAND | wx.LEFT , border=100)

        self.hboxRefer11 = wx.BoxSizer(wx.HORIZONTAL)
	self.tcRefer11 = wx.TextCtrl(self.panelRefer1, wx.ID_ANY, size=(300,250), style = wx.TE_MULTILINE | wx.TE_READONLY | wx.VSCROLL)
        self.font.SetPointSize(13)
        self.tcRefer11.SetFont(self.font)
	self.tcRefer11.AppendText('\n #include<stdio.h>')
	self.tcRefer11.AppendText('\n void main()')
	self.tcRefer11.AppendText('\n {')
	self.tcRefer11.AppendText('\n\t printf("\ n hiii1");')
	self.tcRefer11.AppendText('\n\t printf("\ n hiii2");')
	self.tcRefer11.AppendText('\n\t printf("\ n hiii3");')
	self.tcRefer11.AppendText('\n\t printf("\ n hiii4");')
	self.tcRefer11.AppendText('\n\t printf("\ n hiii5");')
	self.tcRefer11.AppendText('\n }')
	self.hboxRefer11.Add(self.tcRefer11, flag=wx.CENTER, border=20)
	self.vboxRefer1.Add(self.hboxRefer11, flag=wx.EXPAND | wx.CENTER | wx.TOP, border=20)
	self.vboxRefer1.Add((-1, 10))

        self.hboxRefer12 = wx.BoxSizer(wx.HORIZONTAL)
        self.imgRefer1 = wx.EmptyImage(500,300)
	self.imgReferCtrl1 = wx.StaticBitmap(self.panelRefer1, wx.ID_ANY, wx.BitmapFromImage(self.imgRefer1))
	filepath = "Codeop/newline.png"
	self.imgRefer1 = wx.Image(filepath, wx.BITMAP_TYPE_ANY)
	self.imgReferCtrl1.SetBitmap(wx.BitmapFromImage(self.imgRefer1))
	self.hboxRefer12.Add(self.imgReferCtrl1, flag=wx.CENTER, border=20)
	self.vboxRefer1.Add(self.hboxRefer12, flag=wx.EXPAND | wx.CENTER | wx.BOTTOM, border=20)
	self.vboxRefer1.Add((-1, 10))

	self.hboxRefer.Add(self.vboxRefer1, flag=wx.EXPAND | wx.LEFT , border=100)

	self.vboxRefer3 = wx.BoxSizer(wx.VERTICAL)
	self.stRefer3 = wx.StaticText(self.panelRefer1, label='\t\t\t\t')
	self.stRefer3.SetFont(self.font)
	self.vboxRefer3.Add(self.stRefer3, flag=wx.CENTER, border=50)
	self.hboxRefer.Add(self.vboxRefer3, flag=wx.EXPAND | wx.LEFT , border=100)

	self.vboxRefer2 = wx.BoxSizer(wx.VERTICAL)

	self.hboxRefer23 = wx.BoxSizer(wx.HORIZONTAL)
	self.stRefer23 = wx.StaticText(self.panelRefer1, label='Without using \ n')
	self.stRefer23.SetFont(self.font)
	self.hboxRefer23.Add(self.stRefer23, flag=wx.CENTER, border=50)
	self.vboxRefer2.Add(self.hboxRefer23, flag=wx.EXPAND | wx.LEFT , border=100)

        self.hboxRefer21 = wx.BoxSizer(wx.HORIZONTAL)
	self.tcRefer21 = wx.TextCtrl(self.panelRefer1, wx.ID_ANY, size=(300,250), style = wx.TE_MULTILINE | wx.TE_READONLY | wx.VSCROLL)
        self.font.SetPointSize(13)
        self.tcRefer21.SetFont(self.font)
	self.tcRefer21.AppendText('\n #include<stdio.h>')
	self.tcRefer21.AppendText('\n void main()')
	self.tcRefer21.AppendText('\n {')
	self.tcRefer21.AppendText('\n\t printf("\ t hiii1");')
	self.tcRefer21.AppendText('\n\t printf("\ t hiii2");')
	self.tcRefer21.AppendText('\n\t printf("\ t hiii3");')
	self.tcRefer21.AppendText('\n\t printf("\ t hiii4");')
	self.tcRefer21.AppendText('\n\t printf("\ t hiii5");')
	self.tcRefer21.AppendText('\n}')
	self.hboxRefer21.Add(self.tcRefer21, flag=wx.CENTER , border=20)
	self.vboxRefer2.Add(self.hboxRefer21, flag=wx.EXPAND | wx.CENTER | wx.TOP, border=20)
	self.vboxRefer2.Add((-1, 10))

        self.hboxRefer22 = wx.BoxSizer(wx.HORIZONTAL)
        self.imgRefer2 = wx.EmptyImage(500,300)
	self.imgReferCtrl2 = wx.StaticBitmap(self.panelRefer1, wx.ID_ANY, wx.BitmapFromImage(self.imgRefer2))

	filepath = "Codeop/tab.png"
	self.imgRefer2 = wx.Image(filepath, wx.BITMAP_TYPE_ANY)
	self.imgReferCtrl2.SetBitmap(wx.BitmapFromImage(self.imgRefer2))
	self.hboxRefer22.Add(self.imgReferCtrl2, flag=wx.CENTER, border=20)
	self.vboxRefer2.Add(self.hboxRefer22, flag=wx.EXPAND | wx.CENTER | wx.BOTTOM, border=20)
	self.vboxRefer2.Add((-1, 10))
	self.hboxRefer.Add(self.vboxRefer2, flag=wx.EXPAND | wx.RIGHT , border=100)
	self.panelRefer1.SetSizer(self.hboxRefer)
	self.frameRefer1.Show()


# Function For Drawing Graphs

    def persyscallstat(self, name):
	fig = p.figure()
	conn = sqlite3.connect('sparse.db')

	curs = conn.cursor()
	cnt = 0
	bytes = 0
	y=[]
	group_labels=[]
	i=0

	with conn:
	    curs.execute("select * from %s;" % (name))
	    rows=curs.fetchall()
	    for row in rows:

		i=i+1
		section = i
		new_section = "Call_%s" % section
		y.append(float(row[1]))
		#group_labels.append(str(row[0]))
		group_labels.append(new_section)
	    print y

	    N = len(y)
	    ind = range(N)
	    ax = fig.add_subplot(1,1,1)
	    ax.bar(ind, y, facecolor='cyan',align='center',ecolor='cyan')
	    
	    if(name == 'read_tab'):
		#Create a y label
	    	ax.set_ylabel('No of Byte Read')
	 	# Create a title, in italics
	    	ax.set_title('Analysis of No.of Byte Read by Each Read SystemCall',fontstyle='italic')
	    elif(name == 'write_tab'):
		#Create a y label
	    	ax.set_ylabel('No of Byte Write')
	 	# Create a title, in italics
	    	ax.set_title('Analysis of No.of Byte Write by Each Read SystemCall',fontstyle='italic')
	   
	    ax.set_xticks(ind)
	    ax.set_xticklabels(group_labels)
	    fig.autofmt_xdate()
	    '''
	    if(name == 'read_tab'):
		    p.savefig('Graphs/readgrapg.png')
	    else:
		    p.savefig('Graphs/writegraph.png')
	    '''
	    p.savefig('Graphs/readgrapg.png')
	    #p.show()


# class for grid table

class SimpleGrid(wx.grid.Grid):
    def __init__(self, parent,name):
        row_no = 0
        col_no = 0
        col1 = 0
        col2 = 0
        row1 = 0 
        row2 = 1
        wx.grid.Grid.__init__(self, parent, -1)
        conn = sqlite3.connect('sparse.db')

        curs = conn.cursor()
        with conn:
            curs.execute("SELECT COUNT(*) FROM %s" % (name))
            rows = curs.fetchall()

            for row in rows:
                row_no = row[0]

        curs.execute("pragma table_info(%s);" % (name))
        rows = curs.fetchall()

        for row in rows:
                col_no = col_no + 1
                column.append(row[1])

        self.CreateGrid(row_no, col_no)
	'''
	if row_no == 0:
		row_str = "No Entries In This Table "
		self.SetRowLabelValue(row1, row_str)
	else:
	'''	
	for col in column:

	    self.SetColLabelValue(col1, col)
	    col1 = col1 + 1

	curs.execute("SELECT * FROM %s" % (name))
	rows = curs.fetchall()

	for row in rows:
	    row_str = str(row2)
	    self.SetRowLabelValue(row1, row_str)
	    
	    i=0
	    while i < col_no:
	    	self.SetColSize(i,200)
		i+=1
	    
	    while col2<col_no:
	        row_value_str = str(row[col2])
	        self.SetCellValue(row1, col2, row_value_str)
	        self.SetReadOnly(row1,col2,1)
	        col2 = col2 + 1

	    row1 = row1 + 1
	    col2 = 0
	    row2 = row2 + 1

class TestFrame(wx.Frame):
    def __init__(self, parent,name):

	if name == 'sysdisp':
		string = 'System Call Trace '
	elif name == 'errors_tab':
		string = 'Error Analysis '
	elif name == 'fileio_tab':
		string = 'File Input/Output Analysis '
	elif name == 'summary_tab':
		string = 'Summary '
	elif name == 'access_tab':
		string = 'Particular System Call Statistics - ACCESS'
	elif name == 'fstat_tab':
		string = 'Particular System Call Statistics - FSTAT'
	elif name == 'stat_tab':
		string = 'Particular System Call Statistics - STAT'
	elif name == 'lstat_tab':
		string = 'Particular System Call Statistics - LSTAT'
	elif name == 'mmap_tab':
		string = 'Particular System Call Statistics - MMAP'
	elif name == 'mprotect_tab':
		string = 'Particular System Call Statistics - MPROTECT'
	elif name == 'rt_sigaction_tab':
		string = 'Particular System Call Statistics - RT_SIGACTION'
	elif name == 'munmap_tab':
		string = 'Particular System Call Statistics - Munmap'
	elif name == 'uname_tab':
		string = 'Particular System Call Statistics - Uname'
	elif name == 'unfinished':
		string = 'Unfinished System Calls'
	elif name == 'resumed':
		string = 'Resumed System Call'

        wx.Frame.__init__(self, parent, title = string, pos = (25,25), size = (1300,700))
        grid = SimpleGrid(self,name)

def main():
    
    ex = wx.App()
    main = Example(None)
    ex.MainLoop()    

if __name__ == '__main__':
    main()
